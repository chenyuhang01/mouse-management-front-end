{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouse-management-front-end\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouse-management-front-end\\node_modules\\rxjs\\_esm5\\internal\\util\\isNumeric.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouse-management-front-end\\node_modules\\rxjs\\_esm5\\internal\\util\\isNumeric.js","mtime":1529468327381},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouse-management-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529468283648},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouse-management-front-end\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1529468260289}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\n/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\nimport { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map\n",null]}